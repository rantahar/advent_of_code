data = readLines("input")
data[1]
substr(data[1],15,18)
substr(data[1],21,23)
substr(data[1],26,23)
substr(data[1],26,27)
substr(data[1],28,20)
substr(data[1],28,50)
substr(data[1],29,50)
100 %% 100
100 %% 100 + 1
99 %% 100 + 1
100 %% 100 + 1
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
source('~/src/aoc/21/part1.R')
29*29*10*10
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
2,2,2 1,2,3
for(i in c(1,2,3)){}
for(i in c(1,2,3)){for(j = c(1,2,3)){for(k in c(1,2,3)){print(i+j+k)}}}
for(i in c(1,2,3)){for(j in c(1,2,3)){for(k in c(1,2,3)){print(i+j+k)}}}
for(i in c(1,2,3)){for(j in c(1,2,3)){for(k in c(1,2,3)){c = c(c, i+j+k)}}}
c
c = c()
for(i in c(1,2,3)){for(j in c(1,2,3)){for(k in c(1,2,3)){c = c(c, i+j+k)}}}
c
sum(c==3)
sum(c==4)
sum(c==5)
sum(c==6)
sum(c==7)
sum(c==8)
sum(c==9)
sum(c==10)
1:(10-3)
integer64()
library(bit64)
integer64()
integer64(300)
source('~/src/aoc/21/part2.R')
states1
moved = matrix(rep(0, 300), nrow=10)
die_mul = c(0,0,1,3,6,7,6,3,1)
d=3
die_mul[d]*states[d:10]
die_mul[d]*states1[,d:10]
die_mul[d]*states1[d:10,]
source('~/src/aoc/21/part2.R')
die_mul[d]*states1[(d+1):10]
states = states1
die_mul[d]*states1[(d+1):10]
die_mul[d]*states[(d+1):10]
die_mul[d]*states[(d+1):10,]
die_mul[d]*states[(d+1):10,]
moved
source('~/src/aoc/21/part2.R')
moved = matrix(integer64(300), nrow=10)
die_mul[d]*states[(d+1):10,]
die_mul[d]*states[1:(10-d),]
moved[(d+1):10,] = die_mul[d]*states[1:(10-d),]
moved
states[(10-d):10,]
states[(10-d-1):10,]
states[(10-d+1):10,]
moved[1:d]
moved[1:d,]
moved[(d+1):10,] = die_mul[d]*states[1:(10-d),]
moved[1:d] = die_mul[d]*states[(10-d+1):10,]
die_mul[d]*states[(10-d+1):10,]
moved[1:d]
moved[1:d,]
moved[(d+1):10,] = die_mul[d]*states[1:(10-d),]
moved[1:d,] = die_mul[d]*states[(10-d+1):10,]
moved
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
states1
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
moved = matrix(integer64(300), nrow=10)
# First add states according to die roll multiplicities
die_mul = c(0,0,1,3,6,7,6,3,1)
for(d in 3:9){
moved[(d+1):10,] = moved[(d+1):10,] + die_mul[d]*states[1:(10-d),]
moved[1:d,] = moved[1:d,] + die_mul[d]*states[(10-d+1):10,]
}
# shift to the right according to the number of points
shifted = matrix(integer64(300), nrow=10)
moved
states
moved
r=1
print(r)
moved[r,r+1:20]
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
wins
states
states1
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
states1[,21:30]
sum(states2)
states2
sum(states2)
states1[,21:30]
sum(states1[,21:30])
sum(states1[,21:30])*sum(states2)
count_wins(states1, states2)
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
sum(states[,21:30])
sum(states1[,21:30])
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
wins/2
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
197696742628152 - 444356092776315
197696742628152*3
197696742628152*2
source('~/src/aoc/21/part2.R')
r=1
1:29
1:20
r+1:20
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
source('~/src/aoc/21/part2.R')
