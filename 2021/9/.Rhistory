read.delim("input", sep="")
read.delim("example_input", sep="")
source('~/src/aoc/9/part1.R')
data
sub("^([[:alpha:]]*).*", "\\1", data[1])
data[1]
sub(".", "\\1", data[1])
sub(".", "1", data[1])
sub(".", "", data[1])
sub("[.]", "", data[1])
sub("[0-9]", "", data[1])
sub("[0-9]+", "", data[1])
sub("[[0-9]]", "", data[1])
paste(data, collapse = "")
paste(data[0], collapse = "")
paste(data[1], collapse = "")
strsplit(data[0], "")[[1]]
strsplit(data[1], "")[[1]]
strtoi(strsplit(data[1], "")[[1]])
rows = length(data)
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
data
mapply(function, ...)
map
rows
cols
depth[1,]
depth
source('~/src/aoc/9/part1.R')
depth
rows
cols
depth[1,]
depth[,1]
depth[1:cols-1,]
depth[1:(cols-1),]
depth[1:(rows-1),]
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
diff
diff>0
source('~/src/aoc/9/part1.R')
is_low
source('~/src/aoc/9/part1.R')
is_low
source('~/src/aoc/9/part1.R')
is_low
source('~/src/aoc/9/part1.R')
is_low
depth[1:(rows-1),]
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
is_low
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1.R')
source('~/src/aoc/9/part1_and_2.R')
diff = depth[1:(rows-1),] - depth[2:rows,]
diff
diff == 0
where
which
which(diff>0)
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
low_points
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
basins
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
vasins
basins
source('~/src/aoc/9/part1_and_2.R')
basins
a = c(1,2,3)
pop(a)
c(1)
basin_size[1] = 0
basin_size = c()
basin_size[1] = 0
check_points
a=c(1)
a
a[1]
a[1:]
a[1:length(a)]
a[2:length(a)]
length(a)
a
a[[length(a)]]
a
a = list(1)
list
a
a[[1]]
list(1:3)
a = list(1:3)
a
a[[3]]
a[[2]]
a[[1]]
a
a = c(2)
a
a[-1]
a
a = c(2,3,4)
a[-1]
a = c(c(1.2),3,4)
a = c(c(1,2),3,4)
a
# Read the data and find dimensions
data = readLines("example_input")
rows = length(data)
cols = nchar(data[1])
# Create a base for the map
depth = matrix(9,rows, cols)
# extract numbers from the character strings
for(r in 1:rows){
depth[r,] = strtoi(strsplit(data[r], "")[[1]])
}
## Part 1
# We will check each direction and for a lower value. So mark every point
# low first, and change to false when a lower neighbour is found
is_low = matrix(TRUE, rows, cols)
# Take the differences in both directions and mark the higher one as not
# a low point. For equal values we arbitrarily choose the lower index
diff = depth[1:(rows-1),] - depth[2:rows,]
is_low[1:(rows-1),][diff>=0] = FALSE
is_low[2:rows,][diff<0] = FALSE
diff = depth[,1:(cols-1)] - depth[,2:cols]
is_low[,1:(cols-1)][diff>=0] = FALSE
is_low[,2:cols][diff<0] = FALSE
# Calculate and sum risk levels
risk_levels = depth[is_low]+1
risk_level = sum(risk_levels)
cat("Risk level is", risk_level, "\n")
## Part 2
# Each low point has a basin and they are surrounded by walls of height 9.
# For each point run a simple search, crossing of indexes on the map
basins = depth
basins[depth==9] = 1
basins[depth!=9] = 0
# First number the basins
low_points = which(is_low)
basin_size = c()
low_points
6%%cols
6%%rows
depth[6]
depth[13]
6%%rows
6/rows
floor(6/rows)
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
depth[2]
depth[2,]
depth[,1]
depth[,2]
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
depth[1,2]
6-5
6-1
(1-1+cols)%%cols
(1-1)%%cols
(1-2)%%cols
(1-2)%%cols+1
(1-2)%%cols
(1-1)%%cols
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
1*5
1*5+2
1*5+2
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
depth[7]
depth[1]
depth[11]
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
depth[3]
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
depth[51]
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
sort(basin_size)
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
source('~/src/aoc/9/part1_and_2.R')
